<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd">

<!-- DB연결 -->
	<!-- DB 접속 정보를 가지고 있는 문서 읽어들이기 -->
	<beans:bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<beans:property name="location">
			<beans:value>classpath:com/gura/step04/mybatis/db.properties</beans:value>
		</beans:property>
	</beans:bean>
	
	<!-- DataSource 설정 -->
	<beans:bean  id="dataSource" class="org.springframework.jdbc.datasource.SimpleDriverDataSource">
		<beans:property name="driverClass" value="${driver}"/>
		<beans:property name="url" value="${url}"/>
		<beans:property name="username" value="${username}"/>
		<beans:property name="password" value="${password}"/>
	</beans:bean>
	
	<!-- SqlSessionFactory 객체 -->	
	<beans:bean id="sessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<beans:property name="dataSource" ref="dataSource"/>
		<beans:property name="configLocation"
			value="classpath:com/gura/step04/mybatis/Configuration.xml"/>
	</beans:bean>
	
	<!-- Dao 에 주입해줄 SqlSession 인터페이스를 구현한 SqlSessionTemplate 객체 --> 
	<beans:bean class="org.mybatis.spring.SqlSessionTemplate"> <!-- SqlSession type -->
		<beans:constructor-arg name="sqlSessionFactory" ref="sessionFactory"/>
	</beans:bean>
<!-- DB연결 -->	
	
	<!-- Enables the Spring MVC @Controller programming model 
	jackson 어노테이션응답을위한 셋팅 기본적으로되어있다.-->
	<annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />
	
	
	
	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
	
	<!-- Multipart 폼 전송을 처리하기 위한 bean -->
	<!-- 업로드할대 필요한 것 최대 업로드용량 10240000byte  -->
	<beans:bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<beans:property name="maxUploadSize" value="10240000"/>	
	</beans:bean>
	<!-- file download의 Abstract view 가 동작하도록 설정 -->
	<beans:bean class="org.springframework.web.servlet.view.BeanNameViewResolver">
		<beans:property name="order" value="0"/> 
		<!-- name=order 이며 value=0 (우선순위 0순위 설정)
		이설정을 하면 ModelAndView객체가 여기서 제일 먼저 찾고 views폴더에서 찾음. -->
	</beans:bean>
	
	<context:component-scan base-package="com.gura.step04" />
	<!-- com.gura.step04.users 하위의 모든 패키지 스캔하기 -->
	<context:component-scan base-package="com.gura.step04.users.*"/>
	<!-- com.gura.step04.file 하위의 모든 패키지 스캔하기 -->
	<context:component-scan base-package="com.gura.step04.file.*"/>
	<!-- com.gura.step04.cafe 하위의 모든 패키지 스캔하기  -->
	<context:component-scan base-package="com.gura.step04.cafe.*"/>
	
	<!-- AOP패키지를 컴퍼넌트할수 있게 스캔 -->
	<context:component-scan base-package="com.gura.step04.aspect"/>
	
	<context:component-scan base-package="com.gura.step04.util"/>
	
	<context:component-scan base-package="com.gura.step04.shop.*"/>
	<!-- 어노테이션 기반으로 aop 적용할수 있도록 설정 -->
	<aop:aspectj-autoproxy/>
	
	
</beans:beans>
